// Code generated by goa v3.0.6, DO NOT EDIT.
//
// tasks HTTP server
//
// Command:
// $ goa gen github.com/wild-mouse/go-example-todo-application/design

package server

import (
	"context"
	"net/http"

	tasks "github.com/wild-mouse/go-example-todo-application/gen/tasks"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the tasks service endpoint HTTP handlers.
type Server struct {
	Mounts     []*MountPoint
	GetTask    http.Handler
	GetTasks   http.Handler
	AddTask    http.Handler
	UpdateTask http.Handler
	DeleteTask http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the tasks service endpoints.
func New(
	e *tasks.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetTask", "GET", "/tasks/{id}"},
			{"GetTasks", "GET", "/tasks"},
			{"AddTask", "POST", "/tasks"},
			{"UpdateTask", "PUT", "/tasks/{id}"},
			{"DeleteTask", "DELETE", "/task/{id}"},
		},
		GetTask:    NewGetTaskHandler(e.GetTask, mux, dec, enc, eh),
		GetTasks:   NewGetTasksHandler(e.GetTasks, mux, dec, enc, eh),
		AddTask:    NewAddTaskHandler(e.AddTask, mux, dec, enc, eh),
		UpdateTask: NewUpdateTaskHandler(e.UpdateTask, mux, dec, enc, eh),
		DeleteTask: NewDeleteTaskHandler(e.DeleteTask, mux, dec, enc, eh),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "tasks" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetTask = m(s.GetTask)
	s.GetTasks = m(s.GetTasks)
	s.AddTask = m(s.AddTask)
	s.UpdateTask = m(s.UpdateTask)
	s.DeleteTask = m(s.DeleteTask)
}

// Mount configures the mux to serve the tasks endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetTaskHandler(mux, h.GetTask)
	MountGetTasksHandler(mux, h.GetTasks)
	MountAddTaskHandler(mux, h.AddTask)
	MountUpdateTaskHandler(mux, h.UpdateTask)
	MountDeleteTaskHandler(mux, h.DeleteTask)
}

// MountGetTaskHandler configures the mux to serve the "tasks" service
// "get_task" endpoint.
func MountGetTaskHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/tasks/{id}", f)
}

// NewGetTaskHandler creates a HTTP handler which loads the HTTP request and
// calls the "tasks" service "get_task" endpoint.
func NewGetTaskHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeGetTaskRequest(mux, dec)
		encodeResponse = EncodeGetTaskResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_task")
		ctx = context.WithValue(ctx, goa.ServiceKey, "tasks")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountGetTasksHandler configures the mux to serve the "tasks" service
// "get_tasks" endpoint.
func MountGetTasksHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/tasks", f)
}

// NewGetTasksHandler creates a HTTP handler which loads the HTTP request and
// calls the "tasks" service "get_tasks" endpoint.
func NewGetTasksHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		encodeResponse = EncodeGetTasksResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_tasks")
		ctx = context.WithValue(ctx, goa.ServiceKey, "tasks")
		var err error

		res, err := endpoint(ctx, nil)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountAddTaskHandler configures the mux to serve the "tasks" service
// "add_task" endpoint.
func MountAddTaskHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/tasks", f)
}

// NewAddTaskHandler creates a HTTP handler which loads the HTTP request and
// calls the "tasks" service "add_task" endpoint.
func NewAddTaskHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeAddTaskRequest(mux, dec)
		encodeResponse = EncodeAddTaskResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "add_task")
		ctx = context.WithValue(ctx, goa.ServiceKey, "tasks")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountUpdateTaskHandler configures the mux to serve the "tasks" service
// "update_task" endpoint.
func MountUpdateTaskHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/tasks/{id}", f)
}

// NewUpdateTaskHandler creates a HTTP handler which loads the HTTP request and
// calls the "tasks" service "update_task" endpoint.
func NewUpdateTaskHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateTaskRequest(mux, dec)
		encodeResponse = EncodeUpdateTaskResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update_task")
		ctx = context.WithValue(ctx, goa.ServiceKey, "tasks")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountDeleteTaskHandler configures the mux to serve the "tasks" service
// "delete_task" endpoint.
func MountDeleteTaskHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/task/{id}", f)
}

// NewDeleteTaskHandler creates a HTTP handler which loads the HTTP request and
// calls the "tasks" service "delete_task" endpoint.
func NewDeleteTaskHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteTaskRequest(mux, dec)
		encodeResponse = EncodeDeleteTaskResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete_task")
		ctx = context.WithValue(ctx, goa.ServiceKey, "tasks")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}
