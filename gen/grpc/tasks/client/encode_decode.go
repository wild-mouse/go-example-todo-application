// Code generated by goa v3.0.6, DO NOT EDIT.
//
// tasks gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/wild-mouse/go-example-todo-application/design

package client

import (
	"context"

	taskspb "github.com/wild-mouse/go-example-todo-application/gen/grpc/tasks/pb"
	tasks "github.com/wild-mouse/go-example-todo-application/gen/tasks"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetTaskFunc builds the remote method to invoke for "tasks" service
// "get_task" endpoint.
func BuildGetTaskFunc(grpccli taskspb.TasksClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetTask(ctx, reqpb.(*taskspb.GetTaskRequest), opts...)
		}
		return grpccli.GetTask(ctx, &taskspb.GetTaskRequest{}, opts...)
	}
}

// EncodeGetTaskRequest encodes requests sent to tasks get_task endpoint.
func EncodeGetTaskRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*tasks.GetTaskPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("tasks", "get_task", "*tasks.GetTaskPayload", v)
	}
	return NewGetTaskRequest(payload), nil
}

// DecodeGetTaskResponse decodes responses from the tasks get_task endpoint.
func DecodeGetTaskResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*taskspb.GetTaskResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("tasks", "get_task", "*taskspb.GetTaskResponse", v)
	}
	if err := ValidateGetTaskResponse(message); err != nil {
		return nil, err
	}
	res := NewGetTaskResult(message)
	return res, nil
}
