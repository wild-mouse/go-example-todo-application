// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tasks.proto

package taskspb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CountTasksRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountTasksRequest) Reset()         { *m = CountTasksRequest{} }
func (m *CountTasksRequest) String() string { return proto.CompactTextString(m) }
func (*CountTasksRequest) ProtoMessage()    {}
func (*CountTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{0}
}

func (m *CountTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountTasksRequest.Unmarshal(m, b)
}
func (m *CountTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountTasksRequest.Marshal(b, m, deterministic)
}
func (m *CountTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountTasksRequest.Merge(m, src)
}
func (m *CountTasksRequest) XXX_Size() int {
	return xxx_messageInfo_CountTasksRequest.Size(m)
}
func (m *CountTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountTasksRequest proto.InternalMessageInfo

type CountTasksResponse struct {
	Field                int32    `protobuf:"zigzag32,1,opt,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountTasksResponse) Reset()         { *m = CountTasksResponse{} }
func (m *CountTasksResponse) String() string { return proto.CompactTextString(m) }
func (*CountTasksResponse) ProtoMessage()    {}
func (*CountTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{1}
}

func (m *CountTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountTasksResponse.Unmarshal(m, b)
}
func (m *CountTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountTasksResponse.Marshal(b, m, deterministic)
}
func (m *CountTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountTasksResponse.Merge(m, src)
}
func (m *CountTasksResponse) XXX_Size() int {
	return xxx_messageInfo_CountTasksResponse.Size(m)
}
func (m *CountTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountTasksResponse proto.InternalMessageInfo

func (m *CountTasksResponse) GetField() int32 {
	if m != nil {
		return m.Field
	}
	return 0
}

func init() {
	proto.RegisterType((*CountTasksRequest)(nil), "tasks.CountTasksRequest")
	proto.RegisterType((*CountTasksResponse)(nil), "tasks.CountTasksResponse")
}

func init() { proto.RegisterFile("tasks.proto", fileDescriptor_b3834c8ef8464a3f) }

var fileDescriptor_b3834c8ef8464a3f = []byte{
	// 128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x49, 0x2c, 0xce,
	0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x84, 0xb9, 0x04, 0x9d,
	0xf3, 0x4b, 0xf3, 0x4a, 0x42, 0x40, 0xbc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x2d,
	0x2e, 0x21, 0x64, 0xc1, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x11, 0x2e, 0xd6, 0xb4, 0xcc,
	0xd4, 0x9c, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xc1, 0x20, 0x08, 0xc7, 0xc8, 0x8b, 0x8b, 0x15,
	0xac, 0x4c, 0xc8, 0x91, 0x8b, 0x0b, 0xa1, 0x49, 0x48, 0x42, 0x0f, 0x62, 0x19, 0x86, 0xe1, 0x52,
	0x92, 0x58, 0x64, 0x20, 0x36, 0x38, 0x71, 0x46, 0xb1, 0x83, 0xe5, 0x0a, 0x92, 0x92, 0xd8, 0xc0,
	0xae, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x96, 0x1f, 0xdc, 0xad, 0xb4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TasksClient is the client API for Tasks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TasksClient interface {
	// CountTasks implements count_tasks.
	CountTasks(ctx context.Context, in *CountTasksRequest, opts ...grpc.CallOption) (*CountTasksResponse, error)
}

type tasksClient struct {
	cc *grpc.ClientConn
}

func NewTasksClient(cc *grpc.ClientConn) TasksClient {
	return &tasksClient{cc}
}

func (c *tasksClient) CountTasks(ctx context.Context, in *CountTasksRequest, opts ...grpc.CallOption) (*CountTasksResponse, error) {
	out := new(CountTasksResponse)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/CountTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TasksServer is the server API for Tasks service.
type TasksServer interface {
	// CountTasks implements count_tasks.
	CountTasks(context.Context, *CountTasksRequest) (*CountTasksResponse, error)
}

// UnimplementedTasksServer can be embedded to have forward compatible implementations.
type UnimplementedTasksServer struct {
}

func (*UnimplementedTasksServer) CountTasks(ctx context.Context, req *CountTasksRequest) (*CountTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTasks not implemented")
}

func RegisterTasksServer(s *grpc.Server, srv TasksServer) {
	s.RegisterService(&_Tasks_serviceDesc, srv)
}

func _Tasks_CountTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).CountTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/CountTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).CountTasks(ctx, req.(*CountTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tasks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tasks.Tasks",
	HandlerType: (*TasksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountTasks",
			Handler:    _Tasks_CountTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tasks.proto",
}
