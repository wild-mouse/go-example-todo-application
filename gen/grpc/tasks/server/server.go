// Code generated by goa v3.0.6, DO NOT EDIT.
//
// tasks gRPC server
//
// Command:
// $ goa gen github.com/wild-mouse/go-example-todo-application/design

package server

import (
	"context"

	taskspb "github.com/wild-mouse/go-example-todo-application/gen/grpc/tasks/pb"
	tasks "github.com/wild-mouse/go-example-todo-application/gen/tasks"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the taskspb.TasksServer interface.
type Server struct {
	CountTasksH goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the tasks service endpoints.
func New(e *tasks.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		CountTasksH: NewCountTasksHandler(e.CountTasks, uh),
	}
}

// NewCountTasksHandler creates a gRPC handler which serves the "tasks" service
// "count_tasks" endpoint.
func NewCountTasksHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeCountTasksResponse)
	}
	return h
}

// CountTasks implements the "CountTasks" method in taskspb.TasksServer
// interface.
func (s *Server) CountTasks(ctx context.Context, message *taskspb.CountTasksRequest) (*taskspb.CountTasksResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "count_tasks")
	ctx = context.WithValue(ctx, goa.ServiceKey, "tasks")
	resp, err := s.CountTasksH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*taskspb.CountTasksResponse), nil
}
